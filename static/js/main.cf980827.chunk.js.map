{"version":3,"sources":["Maps.js","Tiles.js","Info.js","App.js","serviceWorker.js","index.js"],"names":["Maps","state","items","isLoaded","fetch","then","res","json","data","setState","this","array","map","item","Object","values","idxToDelete","i","length","temp","j","indexOf","push","unshift","spliced","slice","sw","window","screen","width","console","log","id","className","style","display","maxWidth","height","chartType","options","sizeAxis","minValue","maxValue","region","resolution","colorAxis","colors","backgroundColor","fill","Component","Tile","counter","href","App","to","exact","path","component","Info","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cf980827.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Chart from \"react-google-charts\";\n\nclass Maps extends Component {\n\n    state = {       // State to hold JSON data\n        items: [],\n        isLoaded: false,\n    }\n\n    /**\n     * Fetches data from API and loads state.\n     */\n    componentDidMount() {\n        fetch('https://api.covidtracking.com/v1/states/current.json')\n            .then(res => res.json())\n            .then(data => {\n                this.setState({\n                    items: data,\n                    isLoaded: true,\n                })\n            });\n    }\n    /**\n     * Renders map using google chart\n     *\n     * @return {html} html to render.\n     */\n    render() {\n        var { items, isLoaded } = this.state;\n\n        if (!isLoaded) {   // Check if data is loaded\n            return <div></div>\n        }\n\n        var array = items.map(function(item) {  // JSON to array conversion\n            return Object.values(item);\n          });\n\n        var idxToDelete = [0,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54];  // array of columns to delete\n\n        for (var i = 0; i < array.length; i++) {    // loop to delete indices from array\n            var temp = array[i];\n            array[i] = [];\n            for(var j = 0 ; j < temp.length ; j++){\n                if(idxToDelete.indexOf(j) == -1)    // dont delete\n                {\n                    array[i].push(temp[j]);\n                }\n            }\n        }\n\n        array.unshift(['State', 'Total Confirmed Cases', 'Daily New Cases']);  // append headers\n\n        \n        \n        var spliced = array.slice(0, 57);   // get first 57 entries\n\n        var sw = window.screen.width;\n\n        console.log(spliced);\n        return (\n            <div>\n                <div id=\"graph-title\" className=\"title\">Cases by State</div>\n                <div id=\"map\" style={{ display: 'flex', maxWidth: 900 }}>\n                    <Chart\n                        width={sw * 0.7}\n                        height={sw *0.4}\n                        chartType=\"GeoChart\"\n                        data={ spliced }\n                        options={{\n                            sizeAxis: { minValue: 0, maxValue: 100 },\n                            region: 'US',\n                            resolution: 'provinces',\n                            colorAxis: {colors: ['#fee8c8', '#fdbb84', '#e34a33']},\n                            backgroundColor: { fill:'transparent' },\n                        }}\n                    />\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Maps;","import React from 'react'; // Import the Component component from React\nimport {Link} from 'react-router-dom'; // Import the Link component\nimport './App.css';\n \nfunction Tile(props) {\n  return (\n    <div className=\"tile\">\n        <Link to={props.link}>\n            <div className=\"project-title\">{props.title}</div>\n            <div className=\"project-category\">{props.category}</div>\n        </Link>\n    </div>\n  );\n}\n \nexport default Tile;","import React, { Component } from 'react';\nimport './App.css';\nimport Chart from \"react-google-charts\";\nimport Tile from \"./Tiles.js\"\nimport { white } from 'color-name';\n\nclass Maps extends Component {\n\n    state = {       // State to hold JSON data\n        items: [],\n        isLoaded: false,\n    }\n\n    /**\n     * Fetches data from API and loads state.\n     */\n    componentDidMount() {\n        fetch('https://api.covidtracking.com/v1/us/daily.json')\n            .then(res => res.json())\n            .then(data => {\n                this.setState({\n                    items: data,\n                    isLoaded: true,\n                })\n            });\n    }\n    /**\n     * Renders map using google chart\n     *\n     * @return {html} html to render.\n     */\n    render() {\n        var { items, isLoaded } = this.state;\n\n        if (!isLoaded) {   // Check if data is loaded\n            return <div></div>\n        }\n\n        var array = items.map(function(item) {  // JSON to array conversion\n            return Object.values(item);\n          });\n\n        var idxToDelete = [0,1,3,4,5,6,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24];  // array of columns to delete\n        var counter = 22;\n\n        for (var i = 0; i < array.length; i++) {    // loop to delete indices from array\n            var temp = array[i];\n            array[i] = [];\n            array[i].push(counter);\n            counter = counter - 1;\n            for(var j = 0 ; j < temp.length ; j++){\n                if(idxToDelete.indexOf(j) == -1)    // dont delete\n                {  \n                    if (temp[j] == null) {\n                        array[i].push(0);\n                    }\n                    else {\n                        array[i].push(temp[j]);\n                    }\n                }\n            }\n        }\n\n        array.unshift(['Cases','Date']);  // append headers\n\n        \n        \n        var spliced = array.slice(0, 57);   // get first 57 entries\n\n        var sw = window.screen.width;\n\n        console.log(spliced);\n        return (\n            <div>\n                <div id=\"graph-title\" className=\"title\">About</div>\n\n                <div id=\"about\" className=\"title\">All data taken from <a href=\"https://covidtracking.com/\">The Covid Tracking Project API</a>.</div>\n                <div id=\"about\" className=\"title\">Github repo can be found <a href=\"https://github.com/tkkwon1998/epidemic-watch\">here</a>.</div>            \n            </div>\n        )\n    }\n}\n\nexport default Maps;","import React from 'react';\n\nimport { BrowserRouter, Route, Link } from 'react-router-dom'; \nimport Maps from './Maps.js'; \nimport Info from './Info.js'; \nimport './App.css';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n      <div className=\"navigation\">\n      <h1 className=\"title\">COVID-19 MAP OF U.S.</h1>\n          <div className=\"navigation-sub\">                         \n            <Link to=\"/track-covid\" className=\"item\">Cases by State</Link>\n            <Link to=\"/info1\" className=\"item\">About</Link>\n          </div>\n      </div>\n  \n        <div className=\"main-page\">\n          <Route exact path=\"/track-covid\" component={Maps} />\n          <Route path=\"/info1\" component={Info} />\n        </div>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}