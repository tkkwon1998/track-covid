{"ast":null,"code":"var _jsxFileName = \"/Users/taekyoungkwon/epidemic-watch/src/Info.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Chart from \"react-google-charts\";\nimport Tile from \"./Tiles.js\";\n\nclass Maps extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      // State to hold JSON data\n      items: [],\n      isLoaded: false\n    };\n  }\n\n  /**\n   * Fetches data from API and loads state.\n   */\n  componentDidMount() {\n    fetch('https://covidtracking.com/api/us/daily').then(res => res.json()).then(data => {\n      this.setState({\n        items: data,\n        isLoaded: true\n      });\n    });\n  }\n  /**\n   * Renders map using google chart\n   *\n   * @return {html} html to render.\n   */\n\n\n  render() {\n    var {\n      items,\n      isLoaded\n    } = this.state;\n\n    if (!isLoaded) {\n      // Check if data is loaded\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, \"Loading...\");\n    }\n\n    var array = items.map(function (item) {\n      // JSON to array conversion\n      return Object.values(item);\n    });\n    var idxToDelete = [0, 1, 3, 4, 5, 6, 7, 8]; // array of columns to delete\n\n    for (var i = 0; i < array.length; i++) {\n      // loop to delete indices from array\n      var temp = array[i];\n      array[i] = [];\n\n      for (var j = 0; j < temp.length; j++) {\n        if (idxToDelete.indexOf(j) == -1) // dont delete\n          {\n            array[i].push(temp[j]);\n          }\n      }\n    }\n\n    array.unshift(['Cases']); // append headers\n\n    var spliced = array.slice(0, 57); // get first 57 entries\n\n    console.log(spliced);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"map\",\n      style: {\n        display: 'flex',\n        maxWidth: 900\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(Chart, {\n      width: 950,\n      height: 625,\n      chartType: \"GeoChart\",\n      loader: React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, \"Loading Chart\"),\n      data: spliced,\n      options: {\n        sizeAxis: {\n          minValue: 0,\n          maxValue: 100\n        },\n        region: 'US',\n        resolution: 'provinces',\n        colorAxis: {\n          colors: ['#fee8c8', '#fdbb84', '#e34a33']\n        },\n        backgroundColor: {\n          fill: 'transparent'\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Maps;","map":{"version":3,"sources":["/Users/taekyoungkwon/epidemic-watch/src/Info.js"],"names":["React","Component","Chart","Tile","Maps","state","items","isLoaded","componentDidMount","fetch","then","res","json","data","setState","render","array","map","item","Object","values","idxToDelete","i","length","temp","j","indexOf","push","unshift","spliced","slice","console","log","display","maxWidth","sizeAxis","minValue","maxValue","region","resolution","colorAxis","colors","backgroundColor","fill"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Chart from \"react-google-charts\";\nimport Tile from \"./Tiles.js\"\n\nclass Maps extends Component {\n\n    state = {       // State to hold JSON data\n        items: [],\n        isLoaded: false,\n    }\n\n    /**\n     * Fetches data from API and loads state.\n     */\n    componentDidMount() {\n        fetch('https://covidtracking.com/api/us/daily')\n            .then(res => res.json())\n            .then(data => {\n                this.setState({\n                    items: data,\n                    isLoaded: true,\n                })\n            });\n    }\n    /**\n     * Renders map using google chart\n     *\n     * @return {html} html to render.\n     */\n    render() {\n        var { items, isLoaded } = this.state;\n\n        if (!isLoaded) {   // Check if data is loaded\n            return <div>Loading...</div>\n        }\n\n        var array = items.map(function(item) {  // JSON to array conversion\n            return Object.values(item);\n          });\n\n        var idxToDelete = [0,1,3,4,5,6,7,8];  // array of columns to delete\n\n        for (var i = 0; i < array.length; i++) {    // loop to delete indices from array\n            var temp = array[i];\n            array[i] = [];\n            for(var j = 0 ; j < temp.length ; j++){\n                if(idxToDelete.indexOf(j) == -1)    // dont delete\n                {\n                    array[i].push(temp[j]);\n                }\n            }\n        }\n\n        array.unshift(['Cases']);  // append headers\n\n        \n        \n        var spliced = array.slice(0, 57);   // get first 57 entries\n\n        console.log(spliced);\n        return (\n            <div>\n                <div id=\"map\" style={{ display: 'flex', maxWidth: 900 }}>\n                    <Chart\n                        width={950}\n                        height={625}\n                        chartType=\"GeoChart\"\n                        loader={<div>Loading Chart</div>}\n                        data={ spliced }\n                        options={{\n                            sizeAxis: { minValue: 0, maxValue: 100 },\n                            region: 'US',\n                            resolution: 'provinces',\n                            colorAxis: {colors: ['#fee8c8', '#fdbb84', '#e34a33']},\n                            backgroundColor: { fill:'transparent' },\n                        }}\n                    />\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Maps;"]},"metadata":{},"sourceType":"module"}