{"ast":null,"code":"var _jsxFileName = \"/Users/taekyoungkwon/epidemic-watch/src/Maps.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Chart from \"react-google-charts\";\n\nclass Maps extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      items: [],\n      isLoaded: false\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://covidtracking.com/api/states/daily').then(res => res.json()).then(data => {\n      this.setState({\n        items: data,\n        isLoaded: true\n      });\n    });\n  }\n\n  render() {\n    var {\n      items,\n      isLoaded\n    } = this.state;\n\n    if (!isLoaded) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, \"Loading...\");\n    }\n\n    console.log(items[4].date);\n    return React.createElement(\"div\", {\n      style: {\n        display: 'flex',\n        maxWidth: 900\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, React.createElement(Chart, {\n      width: 700,\n      height: 500,\n      chartType: \"GeoChart\",\n      loader: React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, \"Loading Chart\"),\n      data: [['Country', 'Confirmed Cases', 'Deaths'], ['CA', 80813, 3073]],\n      options: {\n        region: 'US',\n        resolution: 'provinces',\n        title: 'Population of Largest U.S. Cities',\n        chartArea: {\n          width: '30%'\n        },\n        hAxis: {\n          title: 'Total Population',\n          minValue: 0\n        },\n        vAxis: {\n          title: 'City'\n        }\n      },\n      legendToggle: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Maps;","map":{"version":3,"sources":["/Users/taekyoungkwon/epidemic-watch/src/Maps.js"],"names":["React","Component","Chart","Maps","state","items","isLoaded","componentDidMount","fetch","then","res","json","data","setState","render","console","log","date","display","maxWidth","region","resolution","title","chartArea","width","hAxis","minValue","vAxis"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;AACA,OAAOC,KAAP,MAAkB,qBAAlB;;AAEA,MAAMC,IAAN,SAAmBF,SAAnB,CAA6B;AAAA;AAAA;AAAA,SACzBG,KADyB,GACjB;AACJC,MAAAA,KAAK,EAAE,EADH;AAEJC,MAAAA,QAAQ,EAAE;AAFN,KADiB;AAAA;;AAOzBC,EAAAA,iBAAiB,GAAG;AAChBC,IAAAA,KAAK,CAAC,4CAAD,CAAL,CACKC,IADL,CACUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADjB,EAEKF,IAFL,CAEUG,IAAI,IAAI;AACV,WAAKC,QAAL,CAAc;AACVR,QAAAA,KAAK,EAAEO,IADG;AAEVN,QAAAA,QAAQ,EAAE;AAFA,OAAd;AAIH,KAPL;AAQH;;AAEDQ,EAAAA,MAAM,GAAG;AACL,QAAI;AAAET,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAsB,KAAKF,KAA/B;;AAEA,QAAI,CAACE,QAAL,EAAe;AACX,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AACH;;AACDS,IAAAA,OAAO,CAACC,GAAR,CAAYX,KAAK,CAAC,CAAD,CAAL,CAASY,IAArB;AACA,WACI;AAAK,MAAA,KAAK,EAAE;AAAEC,QAAAA,OAAO,EAAE,MAAX;AAAmBC,QAAAA,QAAQ,EAAE;AAA7B,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,KAAD;AACI,MAAA,KAAK,EAAE,GADX;AAEI,MAAA,MAAM,EAAE,GAFZ;AAGI,MAAA,SAAS,EAAC,UAHd;AAII,MAAA,MAAM,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAJZ;AAKI,MAAA,IAAI,EAAE,CACN,CAAC,SAAD,EAAY,iBAAZ,EAA+B,QAA/B,CADM,EAEM,CAAC,IAAD,EAAO,KAAP,EAAc,IAAd,CAFN,CALV;AAUI,MAAA,OAAO,EAAE;AACLC,QAAAA,MAAM,EAAE,IADH;AAELC,QAAAA,UAAU,EAAE,WAFP;AAGTC,QAAAA,KAAK,EAAE,mCAHE;AAITC,QAAAA,SAAS,EAAE;AAAEC,UAAAA,KAAK,EAAE;AAAT,SAJF;AAKTC,QAAAA,KAAK,EAAE;AACHH,UAAAA,KAAK,EAAE,kBADJ;AAEHI,UAAAA,QAAQ,EAAE;AAFP,SALE;AASTC,QAAAA,KAAK,EAAE;AACHL,UAAAA,KAAK,EAAE;AADJ;AATE,OAVb;AAuBI,MAAA,YAAY,MAvBhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ;AA6BH;;AAtDwB;;AA0D7B,eAAenB,IAAf","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Chart from \"react-google-charts\";\n\nclass Maps extends Component {\n    state = {\n        items: [],\n        isLoaded: false,\n      }\n\n\n    componentDidMount() {\n        fetch('https://covidtracking.com/api/states/daily')\n            .then(res => res.json())\n            .then(data => {\n                this.setState({\n                    items: data,\n                    isLoaded: true,\n                })\n            });\n    }\n\n    render() {\n        var { items, isLoaded } = this.state;\n\n        if (!isLoaded) {\n            return <div>Loading...</div>\n        }\n        console.log(items[4].date);\n        return (\n            <div style={{ display: 'flex', maxWidth: 900 }}>\n                <Chart\n                    width={700}\n                    height={500}\n                    chartType=\"GeoChart\"\n                    loader={<div>Loading Chart</div>}\n                    data={[\n                    ['Country', 'Confirmed Cases', 'Deaths'],\n                                ['CA', 80813, 3073],\n                                \n                    ]}\n                    options={{\n                        region: 'US',\n                        resolution: 'provinces',\n                    title: 'Population of Largest U.S. Cities',\n                    chartArea: { width: '30%' },\n                    hAxis: {\n                        title: 'Total Population',\n                        minValue: 0,\n                    },\n                    vAxis: {\n                        title: 'City',\n                    },\n                    }}\n                    legendToggle\n                />\n            </div>\n        )\n    }\n}\n\n\nexport default Maps;"]},"metadata":{},"sourceType":"module"}