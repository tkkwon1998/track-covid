{"ast":null,"code":"var _jsxFileName = \"/Users/taekyoungkwon/epidemic-watch/src/Info.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Chart from \"react-google-charts\";\nimport Tile from \"./Tiles.js\";\nimport { white } from 'color-name';\n\nclass Maps extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      // State to hold JSON data\n      items: [],\n      isLoaded: false\n    };\n  }\n\n  /**\n   * Fetches data from API and loads state.\n   */\n  componentDidMount() {\n    fetch('https://covidtracking.com/api/us/daily').then(res => res.json()).then(data => {\n      this.setState({\n        items: data,\n        isLoaded: true\n      });\n    });\n  }\n  /**\n   * Renders map using google chart\n   *\n   * @return {html} html to render.\n   */\n\n\n  render() {\n    var {\n      items,\n      isLoaded\n    } = this.state;\n\n    if (!isLoaded) {\n      // Check if data is loaded\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, \"Loading...\");\n    }\n\n    var array = items.map(function (item) {\n      // JSON to array conversion\n      return Object.values(item);\n    });\n    var idxToDelete = [0, 1, 3, 4, 5, 6, 8]; // array of columns to delete\n\n    var counter = 22;\n\n    for (var i = 0; i < array.length; i++) {\n      // loop to delete indices from array\n      var temp = array[i];\n      array[i] = [];\n      array[i].push(counter);\n      counter = counter - 1;\n\n      for (var j = 0; j < temp.length; j++) {\n        if (idxToDelete.indexOf(j) == -1) // dont delete\n          {\n            if (temp[j] == null) {\n              array[i].push(0);\n            } else {\n              array[i].push(temp[j]);\n            }\n          }\n      }\n    }\n\n    array.unshift(['Day', 'Cases', \"Deaths\"]); // append headers\n\n    var spliced = array.slice(0, 57); // get first 57 entries\n\n    console.log(spliced);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"graph-title\",\n      className: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \"Number of Cases in US\"), React.createElement(\"div\", {\n      id: \"graph\",\n      style: {\n        display: 'flex',\n        maxWidth: 900\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(Chart, {\n      width: 1400,\n      height: 625,\n      chartType: \"LineChart\",\n      loader: React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, \"Loading Chart\"),\n      data: spliced,\n      options: {\n        sizeAxis: {\n          minValue: 0,\n          maxValue: 100\n        },\n        lineWidth: 6,\n        hAxis: {\n          textStyle: {\n            color: '#FFF'\n          },\n          title: \"Days since March 4th\",\n          titleTextStyle: {\n            color: '#FFF'\n          }\n        },\n        vAxis: {\n          textStyle: {\n            color: '#FFF'\n          },\n          title: \"Number of People\",\n          titleTextStyle: {\n            color: '#FFF'\n          },\n          gridlineColor: '#808080'\n        },\n        backgroundColor: {\n          fill: 'transparent',\n          stroke: 2\n        },\n        animation: {\n          duration: 1000,\n          easing: 'out',\n          startup: true\n        },\n        curveType: 'function',\n        legend: {\n          textStyle: {\n            color: '#FFF'\n          }\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Maps;","map":{"version":3,"sources":["/Users/taekyoungkwon/epidemic-watch/src/Info.js"],"names":["React","Component","Chart","Tile","white","Maps","state","items","isLoaded","componentDidMount","fetch","then","res","json","data","setState","render","array","map","item","Object","values","idxToDelete","counter","i","length","temp","push","j","indexOf","unshift","spliced","slice","console","log","display","maxWidth","sizeAxis","minValue","maxValue","lineWidth","hAxis","textStyle","color","title","titleTextStyle","vAxis","gridlineColor","backgroundColor","fill","stroke","animation","duration","easing","startup","curveType","legend"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Chart from \"react-google-charts\";\nimport Tile from \"./Tiles.js\"\nimport { white } from 'color-name';\n\nclass Maps extends Component {\n\n    state = {       // State to hold JSON data\n        items: [],\n        isLoaded: false,\n    }\n\n    /**\n     * Fetches data from API and loads state.\n     */\n    componentDidMount() {\n        fetch('https://covidtracking.com/api/us/daily')\n            .then(res => res.json())\n            .then(data => {\n                this.setState({\n                    items: data,\n                    isLoaded: true,\n                })\n            });\n    }\n    /**\n     * Renders map using google chart\n     *\n     * @return {html} html to render.\n     */\n    render() {\n        var { items, isLoaded } = this.state;\n\n        if (!isLoaded) {   // Check if data is loaded\n            return <div>Loading...</div>\n        }\n\n        var array = items.map(function(item) {  // JSON to array conversion\n            return Object.values(item);\n          });\n\n        var idxToDelete = [0,1,3,4,5,6,8];  // array of columns to delete\n        var counter = 22;\n\n        for (var i = 0; i < array.length; i++) {    // loop to delete indices from array\n            var temp = array[i];\n            array[i] = [];\n            array[i].push(counter);\n            counter = counter - 1;\n            for(var j = 0 ; j < temp.length ; j++){\n                if(idxToDelete.indexOf(j) == -1)    // dont delete\n                {  \n                    if (temp[j] == null) {\n                        array[i].push(0);\n                    }\n                    else {\n                        array[i].push(temp[j]);\n                    }\n                }\n            }\n        }\n\n        array.unshift(['Day', 'Cases', \"Deaths\"]);  // append headers\n\n        \n        \n        var spliced = array.slice(0, 57);   // get first 57 entries\n\n        console.log(spliced);\n        return (\n            <div>\n                <div id=\"graph-title\" className=\"title\">Number of Cases in US</div>\n                <div id=\"graph\" style={{ display: 'flex', maxWidth: 900 }}>\n                    <Chart\n                        width={1400}\n                        height={625}\n                        chartType=\"LineChart\"\n                        loader={<div>Loading Chart</div>}\n                        data={ spliced }\n                        options={{\n                            sizeAxis: { minValue: 0, maxValue: 100 },\n                            lineWidth: 6,\n                            hAxis: {\n                                textStyle:{color: '#FFF'},\n                                title: \"Days since March 4th\",\n                                titleTextStyle: { color: '#FFF' },\n                            },\n                            vAxis: {\n                                textStyle:{color: '#FFF'},\n                                title: \"Number of People\",\n                                titleTextStyle: { color: '#FFF' },\n                                gridlineColor: '#808080',\n                            },\n                            backgroundColor: { fill:'transparent' , stroke: 2},\n                            animation: {\n                                duration: 1000,\n                                easing: 'out',\n                                startup: true\n                            },\n                            curveType: 'function',\n                            legend: {\n                                textStyle: {\n                                    color: '#FFF',\n                                }\n                            }\n                        }}\n                    />\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Maps;"]},"metadata":{},"sourceType":"module"}